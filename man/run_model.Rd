% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_model.R
\name{run_model}
\alias{run_model}
\title{Run an rainwater management model executable with an input file}
\usage{
run_model(path_exe, path_input, print_output = FALSE, debug = TRUE, ...)
}
\arguments{
\item{path_exe}{\code{character(1)}
Path to the model executable (e.g., a \code{.exe} on Windows). The file must exist.}

\item{path_input}{\code{character(1)}
Path to the model input file passed as the single argument to the executable.
The file must exist.}

\item{print_output}{\code{logical(1)}
If \code{TRUE}, stream the process output to the console and return the exit
status (integer). If \code{FALSE} (default), capture and return the command
output as a character vector.}

\item{debug}{\code{logical(1)}
Forwarded to \code{kwb.utils::catAndRun(dbg = ...)} to enable/disable the
progress message. Default: \code{TRUE}.}

\item{...}{Additional arguments passed to \code{\link[base:shell]{base::shell()}}, e.g. \code{timeout} on Windows.
See \code{?base::shell} for details.}
}
\value{
If \code{print_output = FALSE}, a character vector containing the captured
standard output of the command.
If \code{print_output = TRUE}, the (invisible) integer exit status returned by
\code{shell()} (0 indicates success).
}
\description{
Builds and runs a system command of the form \code{"<path_exe> <path_input>"},
after normalising both paths to absolute paths. Progress and (optionally)
command output are wrapped with \code{\link[kwb.utils:catAndRun]{kwb.utils::catAndRun()}} for neat logging.
}
\details{
Both \code{path_exe} and \code{path_input} are converted to absolute, normalised
paths via \code{\link[fs:path_math]{fs::path_abs()}} and \code{\link[base:normalizePath]{base::normalizePath()}}. The command is
executed with \code{\link[base:shell]{base::shell()}}, which on Windows invokes the system shell.
On non-Windows platforms, prefer \code{\link[base:system]{base::system()}} if you need full POSIX semantics.
}
\section{Side effects}{

Executes an external program that may read/write files depending on the model.
Ensure you trust the executable and paths provided.
}

\examples{
\dontrun{
# Example: run a hypothetical model with an input file
exe   <- "C:/path/to/model.exe"
input <- "C:/path/to/input.h5"

# Capture output as character vector
out <- run_model(exe, input, print_output = FALSE)

# Stream output and get exit status
status <- run_model(exe, input, print_output = TRUE)
}

}
\seealso{
\code{\link[base:shell]{base::shell()}}, \code{\link[fs:path_math]{fs::path_abs()}}, \code{\link[kwb.utils:catAndRun]{kwb.utils::catAndRun()}}
}
